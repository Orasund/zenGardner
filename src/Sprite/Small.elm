module Sprite.Small exposing (..)

import Direction exposing (Direction(..))
import Tile exposing (Tile(..))


fromTile : Tile -> List String
fromTile tile =
    case tile of
        ObstacleTile _ ->
            [ "â¬œâ¬›"
            , "â¬œâ¬œ"
            ]

        Sign _ ->
            [ "â¬œâ¬›"
            , "â¬œâ¬œ"
            ]

        Bonsai ->
            [ "â¬œâ¬›"
            , "â¬œâ¬œ"
            ]

        Path dir1 dir2 ->
            path dir1 dir2

        Sand ->
            [ "â¬œâ¬œ"
            , "â¬œâ¬œ"
            ]

        Gras ->
            [ "â¬œðŸŸ©"
            , "â¬œâ¬œ"
            ]

        Water ->
            [ "ðŸŸ¦ðŸŸ¦"
            , "ðŸŸ¦ðŸŸ¦"
            ]


path : Direction -> Direction -> List String
path dir1 dir2 =
    case ( dir1, dir2 ) of
        ( Up, Down ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Down, Up ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Up, Up ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Down, Down ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Left, Right ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Right, Left ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Left, Left ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Right, Right ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Up, Left ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Left, Up ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Up, Right ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Right, Up ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œâ¬œ"
            ]

        ( Down, Left ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Left, Down ) ->
            [ "ðŸŸ¨ðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Down, Right ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]

        ( Right, Down ) ->
            [ "â¬œðŸŸ¨"
            , "â¬œðŸŸ¨"
            ]
